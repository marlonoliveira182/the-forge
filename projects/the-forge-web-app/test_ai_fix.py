#!/usr/bin/env python3
"""
Test script to verify AI description generator is using the user's specific prompt
and generating proper functional descriptions.
"""

import sys
import os
import tempfile

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.ai_description_generator import AIDescriptionGenerator

def test_ai_description_generator():
    """Test the AI description generator with a sample XSD file."""
    
    print("ü§ñ Testing AI Description Generator with User's Specific Prompt")
    print("=" * 60)
    
    # Create a sample XSD content for testing
    sample_xsd = '''<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="CustomerOrder">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="customerId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                <xs:element name="orderDate" type="xs:date" minOccurs="1" maxOccurs="1"/>
                <xs:element name="orderItems" type="OrderItems" minOccurs="1" maxOccurs="1"/>
                <xs:element name="totalAmount" type="xs:decimal" minOccurs="1" maxOccurs="1"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:complexType name="OrderItems">
        <xs:sequence>
            <xs:element name="item" type="OrderItem" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="OrderItem">
        <xs:sequence>
            <xs:element name="productId" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element name="quantity" type="xs:integer" minOccurs="1" maxOccurs="1"/>
            <xs:element name="unitPrice" type="xs:decimal" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>'''
    
    # Create temporary file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.xsd', delete=False) as f:
        f.write(sample_xsd)
        temp_file_path = f.name
    
    try:
        # Initialize the AI description generator with AI enabled
        print("üìã Initializing AI Description Generator...")
        ai_generator = AIDescriptionGenerator(enable_ai=True)
        
        print(f"üîß AI Enabled: {ai_generator.enable_ai}")
        print(f"ü§ñ AI Initialized: {ai_generator._ai_initialized}")
        
        # Generate descriptions
        print("\nüìù Generating descriptions...")
        start_time = time.time()
        
        descriptions = ai_generator.generate_descriptions(temp_file_path, 'XSD')
        
        generation_time = time.time() - start_time
        
        print(f"\n‚è±Ô∏è  Generation completed in {generation_time:.2f}s")
        print(f"ü§ñ AI Initialized after use: {ai_generator._ai_initialized}")
        
        # Display results
        print("\n" + "=" * 60)
        print("üìã SHORT DESCRIPTION:")
        print("-" * 30)
        print(descriptions.get('short_description', 'No short description generated'))
        
        print("\nüìã DETAILED DESCRIPTION:")
        print("-" * 30)
        print(descriptions.get('detailed_description', 'No detailed description generated'))
        
        # Check if AI was actually used
        if ai_generator._ai_initialized:
            print(f"\n‚úÖ AI was successfully initialized and used")
        else:
            print(f"\n‚ùå AI was not initialized - check for errors")
            
        # Check if the description looks like it was generated by AI or rule-based
        detailed_desc = descriptions.get('detailed_description', '')
        if any(phrase in detailed_desc.lower() for phrase in [
            'web service definition', 'data schema definition', 'json schema definition'
        ]):
            print("‚ö†Ô∏è  Description appears to be rule-based (pre-defined)")
        else:
            print("‚úÖ Description appears to be AI-generated")
            
    except Exception as e:
        print(f"‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        # Clean up temporary file
        try:
            os.unlink(temp_file_path)
        except:
            pass

if __name__ == "__main__":
    import time
    test_ai_description_generator() 