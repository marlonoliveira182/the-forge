import streamlit as st
import os
import tempfile
import json
import xml.etree.ElementTree as ET
from io import BytesIO
import base64

# Import the microservices
from services.xsd_parser_service import XSDParser
from services.excel_export_service import ExcelExporter
from services.wsdl_to_xsd_extractor import merge_xsd_from_wsdl
from services.excel_mapping_service import ExcelMappingService
from services.json_to_excel_service import JSONToExcelService

# Page configuration
st.set_page_config(
    page_title="The Forge - Schema Transformation Tool",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for modern UI
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .section-header {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1.5rem 0 1rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin: 1rem 0;
    }
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    .upload-area {
        border: 2px dashed #667eea;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        margin: 1rem 0;
    }
    .success-message {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .error-message {
        background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .warning-message {
        background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
</style>
""", unsafe_allow_html=True)

# Initialize services with caching
@st.cache_resource
def get_services():
    return {
        'xsd_parser': XSDParser(),
        'excel_exporter': ExcelExporter(),
        'mapping_service': ExcelMappingService(),
        'json_to_excel': JSONToExcelService()
    }

def main():
    # Header
    st.markdown('''
        <div class="main-header">
            <h1>üîß The Forge - Schema Transformation Tool</h1>
            <p style="font-size: 1.2rem; margin-top: 0.5rem;">Powerful schema transformation and mapping tool</p>
        </div>
    ''', unsafe_allow_html=True)
    
    # Get services
    services = get_services()
    
    # Sidebar navigation
    st.sidebar.markdown("## üß≠ Navigation")
    page = st.sidebar.selectbox(
        "Choose a tool:",
        ["üè† Home", "üìä Schema Mapping", "üîß WSDL to XSD", "üìã Schema to Excel", "‚ÑπÔ∏è About"]
    )
    
    if page == "üè† Home":
        show_home_page()
    elif page == "üìä Schema Mapping":
        show_mapping_page(services)
    elif page == "üîß WSDL to XSD":
        show_wsdl_to_xsd_page(services)
    elif page == "üìã Schema to Excel":
        show_schema_to_excel_page(services)
    elif page == "‚ÑπÔ∏è About":
        show_about_page()

def show_home_page():
    st.markdown('<div class="section-header"><h2>üè† Welcome to The Forge</h2></div>', unsafe_allow_html=True)
    
    st.markdown("""
    **The Forge** is your comprehensive schema transformation toolkit. Transform, map, and analyze schema files with ease.
    """)
    
    # Feature cards
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <h3>üìä Schema Mapping</h3>
            <p>Create field mappings between different schema formats (XSD, JSON Schema). 
            Automatically detect similarities and generate comprehensive mapping documentation.</p>
            <ul>
                <li>Support for XSD and JSON Schema</li>
                <li>Automatic similarity detection</li>
                <li>Excel export with detailed mapping</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
            <h3>üîß WSDL to XSD Extraction</h3>
            <p>Extract XSD schemas from WSDL files. Perfect for working with web services and SOAP APIs.</p>
            <ul>
                <li>Parse complex WSDL files</li>
                <li>Extract embedded XSD schemas</li>
                <li>Clean, formatted output</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <h3>üìã Schema to Excel</h3>
            <p>Convert schema files to Excel format for easy analysis and documentation.</p>
            <ul>
                <li>Detailed schema structure</li>
                <li>Element properties and types</li>
                <li>Ready for analysis</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
            <h3>üöÄ Key Features</h3>
            <ul>
                <li>‚úÖ No compilation issues</li>
                <li>‚úÖ Lightweight dependencies</li>
                <li>‚úÖ Cross-platform compatibility</li>
                <li>‚úÖ Production ready</li>
                <li>‚úÖ Modern web interface</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Quick start guide
    st.markdown('<div class="section-header"><h3>üöÄ Quick Start</h3></div>', unsafe_allow_html=True)
    
    st.markdown("""
    1. **Schema Mapping**: Upload source and target schema files, then generate mappings
    2. **WSDL to XSD**: Upload a WSDL file to extract embedded XSD schemas
    3. **Schema to Excel**: Upload any schema file to convert it to Excel format
    
    All tools support XSD, XML, JSON Schema, and WSDL file formats.
    """)

def show_mapping_page(services):
    st.markdown('<div class="section-header"><h2>üìä Schema Mapping</h2></div>', unsafe_allow_html=True)
    
    st.markdown("""
    Create field mappings between different schema formats. Upload source and target schema files to generate comprehensive mapping documentation.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üì§ Source Schema")
        source_file = st.file_uploader(
            "Upload source schema file",
            type=['xsd', 'xml', 'json'],
            key="source",
            help="Upload your source schema file (XSD, XML, or JSON Schema)"
        )
        
        if source_file:
            st.markdown(f'<div class="success-message">‚úÖ Uploaded: {source_file.name}</div>', unsafe_allow_html=True)
            # Show file preview
            content = source_file.read()
            source_file.seek(0)  # Reset file pointer
            with st.expander("üìÑ File Preview"):
                st.code(content.decode('utf-8')[:1000] + "..." if len(content) > 1000 else content.decode('utf-8'), language="xml")
    
    with col2:
        st.markdown("### üì• Target Schema")
        target_file = st.file_uploader(
            "Upload target schema file",
            type=['xsd', 'xml', 'json'],
            key="target",
            help="Upload your target schema file (XSD, XML, or JSON Schema)"
        )
        
        if target_file:
            st.markdown(f'<div class="success-message">‚úÖ Uploaded: {target_file.name}</div>', unsafe_allow_html=True)
            # Show file preview
            content = target_file.read()
            target_file.seek(0)  # Reset file pointer
            with st.expander("üìÑ File Preview"):
                st.code(content.decode('utf-8')[:1000] + "..." if len(content) > 1000 else content.decode('utf-8'), language="xml")
    
    # Settings
    st.markdown("### ‚öôÔ∏è Settings")
    col1, col2 = st.columns(2)
    with col1:
        threshold = st.slider("Similarity Threshold", 0.0, 1.0, 0.7, 0.1, 
                            help="Minimum similarity score for automatic field matching")
    with col2:
        keep_case = st.checkbox("Keep Original Case", value=False, 
                               help="Preserve original field names case")
    
    # Generate mapping button
    if st.button("üöÄ Generate Mapping", type="primary", use_container_width=True):
        if source_file and target_file:
            with st.spinner("üîÑ Generating mapping..."):
                try:
                    result = process_mapping(source_file, target_file, services, threshold, keep_case)
                    if result:
                        st.markdown('<div class="success-message">‚úÖ Mapping generated successfully!</div>', unsafe_allow_html=True)
                        st.download_button(
                            label="üì• Download Excel File",
                            data=result,
                            file_name="schema_mapping.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
                    else:
                        st.markdown('<div class="error-message">‚ùå Failed to generate mapping</div>', unsafe_allow_html=True)
                except Exception as e:
                    st.markdown(f'<div class="error-message">‚ùå Error: {str(e)}</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-message">‚ö†Ô∏è Please upload both source and target schema files</div>', unsafe_allow_html=True)

def show_wsdl_to_xsd_page(services):
    st.markdown('<div class="section-header"><h2>üîß WSDL to XSD Extraction</h2></div>', unsafe_allow_html=True)
    
    st.markdown("""
    Extract XSD schemas from WSDL files. Perfect for working with web services and SOAP APIs.
    """)
    
    wsdl_file = st.file_uploader(
        "Upload WSDL file",
        type=['wsdl', 'xml'],
        key="wsdl",
        help="Upload your WSDL file to extract embedded XSD schemas"
    )
    
    if wsdl_file:
        st.markdown(f'<div class="success-message">‚úÖ Uploaded: {wsdl_file.name}</div>', unsafe_allow_html=True)
        # Show file preview
        content = wsdl_file.read()
        wsdl_file.seek(0)  # Reset file pointer
        with st.expander("üìÑ WSDL Preview"):
            st.code(content.decode('utf-8')[:1000] + "..." if len(content) > 1000 else content.decode('utf-8'), language="xml")
    
    if st.button("üîß Extract XSD", type="primary", use_container_width=True):
        if wsdl_file:
            with st.spinner("üîÑ Extracting XSD..."):
                try:
                    result = process_wsdl_to_xsd(wsdl_file, services)
                    if result:
                        st.markdown('<div class="success-message">‚úÖ XSD extracted successfully!</div>', unsafe_allow_html=True)
                        st.download_button(
                            label="üì• Download XSD File",
                            data=result,
                            file_name="extracted_schema.xsd",
                            mime="application/xml",
                            use_container_width=True
                        )
                    else:
                        st.markdown('<div class="error-message">‚ùå Failed to extract XSD</div>', unsafe_allow_html=True)
                except Exception as e:
                    st.markdown(f'<div class="error-message">‚ùå Error: {str(e)}</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-message">‚ö†Ô∏è Please upload a WSDL file</div>', unsafe_allow_html=True)

def show_schema_to_excel_page(services):
    st.markdown('<div class="section-header"><h2>üìã Schema to Excel</h2></div>', unsafe_allow_html=True)
    
    st.markdown("""
    Convert schema files to Excel format for easy analysis and documentation.
    """)
    
    schema_file = st.file_uploader(
        "Upload schema file",
        type=['xsd', 'xml', 'json'],
        key="schema",
        help="Upload your schema file (XSD, XML, or JSON Schema)"
    )
    
    if schema_file:
        st.markdown(f'<div class="success-message">‚úÖ Uploaded: {schema_file.name}</div>', unsafe_allow_html=True)
        # Show file preview
        content = schema_file.read()
        schema_file.seek(0)  # Reset file pointer
        with st.expander("üìÑ File Preview"):
            st.code(content.decode('utf-8')[:1000] + "..." if len(content) > 1000 else content.decode('utf-8'), language="xml")
    
    keep_case = st.checkbox("Keep Original Case", value=False, key="schema_case",
                           help="Preserve original field names case")
    
    if st.button("üìã Convert to Excel", type="primary", use_container_width=True):
        if schema_file:
            with st.spinner("üîÑ Converting to Excel..."):
                try:
                    result = process_schema_to_excel(schema_file, services, keep_case)
                    if result:
                        st.markdown('<div class="success-message">‚úÖ Excel file generated successfully!</div>', unsafe_allow_html=True)
                        st.download_button(
                            label="üì• Download Excel File",
                            data=result,
                            file_name="schema_structure.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
                    else:
                        st.markdown('<div class="error-message">‚ùå Failed to generate Excel file</div>', unsafe_allow_html=True)
                except Exception as e:
                    st.markdown(f'<div class="error-message">‚ùå Error: {str(e)}</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-message">‚ö†Ô∏è Please upload a schema file</div>', unsafe_allow_html=True)

def show_about_page():
    st.markdown('<div class="section-header"><h2>‚ÑπÔ∏è About The Forge</h2></div>', unsafe_allow_html=True)
    
    st.markdown("""
    **The Forge** is a powerful schema transformation tool that provides comprehensive capabilities for working with schema files.
    
    ### üéØ Core Features
    
    - **üìä Schema Mapping**: Create field mappings between different schema formats (XSD, JSON Schema)
    - **üîß WSDL to XSD Extraction**: Extract XSD schemas from WSDL files
    - **üìã Schema to Excel**: Convert schema files to Excel format for analysis
    
    ### üìÅ Supported Formats
    
    **Input Formats:**
    - XSD (.xsd)
    - XML (.xml)
    - JSON Schema (.json)
    - WSDL (.wsdl, .xml)
    
    **Output Formats:**
    - Excel (.xlsx)
    - XSD (.xsd)
    
    ### üöÄ Key Benefits
    
    - ‚úÖ **No compilation issues** - Pure Python implementation
    - ‚úÖ **Lightweight dependencies** - Minimal external requirements
    - ‚úÖ **Cross-platform compatibility** - Works on Windows, macOS, Linux
    - ‚úÖ **Production ready** - Robust error handling and validation
    - ‚úÖ **Modern web interface** - Clean, responsive Streamlit UI
    
    ### üîß Technical Details
    
    This web version is based on The Forge v8 desktop application, adapted for online deployment with Streamlit.
    The application uses microservices architecture for modular functionality and easy maintenance.
    
    ### üìû Support
    
    For issues, questions, or feature requests, please refer to the project documentation or create an issue in the repository.
    """)
    
    # Version info
    st.markdown("### üìã Version Information")
    st.code("""
    The Forge Web App v1.0.0
    Built with Streamlit
    Based on The Forge v8 Desktop Application
    """)

def process_mapping(source_file, target_file, services, threshold, keep_case):
    """Process schema mapping"""
    try:
        # Create temporary files
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{source_file.name.split('.')[-1]}") as source_temp:
            source_file.save(source_temp.name)
            source_temp_path = source_temp.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{target_file.name.split('.')[-1]}") as target_temp:
            target_file.save(target_temp.name)
            target_temp_path = target_temp.name
        
        # Parse schemas
        source_data = parse_schema_file(source_temp_path, services['xsd_parser'])
        target_data = parse_schema_file(target_temp_path, services['xsd_parser'])
        
        # Generate mapping
        mapping_data = services['mapping_service'].generate_mapping_from_schemas(source_data, target_data)
        
        # Create Excel file
        output_buffer = BytesIO()
        services['excel_exporter'].export({'mapping': mapping_data}, output_buffer)
        
        # Clean up temp files
        os.unlink(source_temp_path)
        os.unlink(target_temp_path)
        
        output_buffer.seek(0)
        return output_buffer.getvalue()
        
    except Exception as e:
        st.error(f"Error in mapping: {str(e)}")
        return None

def process_wsdl_to_xsd(wsdl_file, services):
    """Process WSDL to XSD extraction"""
    try:
        # Read WSDL content
        wsdl_content = wsdl_file.read().decode('utf-8')
        
        # Extract XSD
        xsd_content = merge_xsd_from_wsdl(wsdl_content)
        
        if not xsd_content or xsd_content.startswith("Error"):
            st.error(f"Error extracting XSD: {xsd_content}")
            return None
        
        return xsd_content.encode('utf-8')
        
    except Exception as e:
        st.error(f"Error in WSDL extraction: {str(e)}")
        return None

def process_schema_to_excel(schema_file, services, keep_case):
    """Process schema to Excel conversion"""
    try:
        # Create temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{schema_file.name.split('.')[-1]}") as temp_file:
            schema_file.save(temp_file.name)
            temp_path = temp_file.name
        
        # Parse schema
        schema_data = parse_schema_file(temp_path, services['xsd_parser'])
        
        # Create Excel file
        output_buffer = BytesIO()
        services['excel_exporter'].export({'schema': schema_data}, output_buffer)
        
        # Clean up temp file
        os.unlink(temp_path)
        
        output_buffer.seek(0)
        return output_buffer.getvalue()
        
    except Exception as e:
        st.error(f"Error in schema to Excel: {str(e)}")
        return None

def parse_schema_file(file_path, xsd_parser):
    """Parse schema file based on its type"""
    if file_path.endswith('.json'):
        # Handle JSON Schema
        with open(file_path, 'r') as f:
            return json.load(f)
    else:
        # Handle XSD
        return xsd_parser.parse_xsd_file(file_path)

if __name__ == "__main__":
    main() 